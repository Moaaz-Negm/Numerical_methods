#  LAGRANGE INTERPOLATION FOR EXPERIMENTAL DATA POINTS -------------------

def lagrange_interpolate(x, y, degree, x0):
    
    x = np.asarray(x, dtype=float)
    y = np.asarray(y, dtype=float)
    
    x0_arr = np.asarray(x0, dtype=float)

    n = x.size
    
    if y.size != n:
        raise ValueError("x and y must have the same length")
    
    if degree < 0 or degree > n - 1:
        raise ValueError(f"degree must be between 0 and {n-1}")
    
    if n < degree + 1:
        raise ValueError("Not enough points for the requested degree")

    # Use only the first degree+1 points
    x_sub = x[:degree+1]
    y_sub = y[:degree+1]

    # Ensure x0_arr is at least 1D for vectorized operations
    x0_vec = np.atleast_1d(x0_arr)
    y0_vec = np.zeros_like(x0_vec, dtype=float)

    # Compute Lagrange interpolation
    for i in range(degree + 1):
        Li = np.ones_like(x0_vec, dtype=float)
        for j in range(degree + 1):
            if j != i:
                Li *= (x0_vec - x_sub[j]) / (x_sub[i] - x_sub[j])
        y0_vec += y_sub[i] * Li

    # Return scalar if input x0 was scalar
    if y0_vec.size == 1:
        return float(y0_vec[0])
    
    return y0_vec

# TEST 1

x_vals_1 = [
    0.20584494295802447,
    0.5808361216819946,
    1.5599452033620265,
    1.5601864044243652,
    1.8182496720710062,
    1.8340450985343382,
    2.1233911067827616,
    2.9122914019804194,
    3.0424224295953772,
    3.745401188473625,
    4.319450186421157,
    5.247564316322379,
    5.986584841970366,
    6.011150117432088,
    7.080725777960454,
    7.319939418114051,
    8.324426408004218,
    8.661761457749352,
    9.50714306409916,
    9.699098521619943
]

y_vals_1
= [
    0.10311122579104424,
    0.5801478629660739,
    0.9091387195856794,
    0.8587133451681189,
    1.1161042084683448,
    0.942972053637659,
    0.8579182157162777,
    0.08482230148775682,
    0.04456947933819072,
   -0.5566894312582904,
   -1.03888712979815,
   -0.8226094207604397,
   -0.352334674639301,
   -0.2978617145610668,
    0.6554696911511633,
    1.045984370728375,
    0.8900170454832439,
    0.5853336845687069,
   -0.000017516085804927806,
   -0.39297732996772367
]


# Test 2

x_vals_2 = [
    0.031711167552942454,
    0.417179728187511145,
    1.354881636779617926,
    2.485986366707098938,
    2.575964353011589658,
    2.928093920494768909,
    3.001150047446365932,
    3.882355461139825881,
    4.455681640475951610,
    4.552052852095748392,
    4.926169375062624312,
    6.109143326668790230,
    6.573675854710376854,
    7.694578719378116105,
    8.009844748694399996,
    8.010580865919948224,
    8.878517027303779230,
    9.130273914206462393,
    9.326056398865024022,
    9.642384192500571771
]

# corresponding y-values
y_vals_2 = [
  -1054.7331747101413839,
   -88.9284705457620532,
   163.3549732094268734,
 -1726.8783033862607681,
  1137.6375980970842647,
   176.9397311427109400,
    -5.4517690366808438,
   266.6814409625453095,
  2810.3079869160987982,
  1177.3402849566255099,
  1884.6989208976378904,
  7099.4495848310907604,
  9361.2353156752542418,
 22065.9170179453067249,
 26317.2494584297965048,
 26309.0547852412855718,
 45980.2905944661833928,
 51705.3313201235141605,
 56882.6559329516749131,
 67419.8424800133216195
]
